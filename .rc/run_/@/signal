type -t kill_signal_>/dev/null||kill_signal_(){ [[ $# -ne 0 ]]||{ [[ $SIGPID == 0 ]]&&{ local -a SIGPID;reset_sigpid_;};set -- "${SIGPID[@]}";};for((;$#>0;))do [[ -n $1&&$(realpath "$(awk '{printf $9}'<<<"$(ps -f "$1")")") == $(realpath "$0")&&" ${NKL[*]} " != *" $1 "* ]]&&kill "$1";shift;done 2>/dev/null;SIGPID=();};reset_sigpid_(){ set -- " $* ";SIGPID=(" $(subpid_)");local pid;for pid in $(subpid_);do pid=" $pid ";[[ $SIGPID == *$pid*&&$* != *$pid* ]]&&SIGPID+=($pid);done;SIGPID=("${SIGPID[@]:1}");};subpid_(){ local pid;for pid in $(ps -f|grep "$0"|awk '{print $2}');do [[ $pid -eq $$ ]]||echo -n "$pid ";done;};[[ -z $SIGPID ]]||kill_signal_;signal_ext_(){ printf 'if [[ -e ${%s%%/}/task ]] 2>/dev/null;then . "${%s%%/}/task";elif [[ ${%s%%/} != ${%s%%/}&&-e ${%s%%/}/.rc/run_/@/task ]] 2>/dev/null;then . "${%s%%/}/.rc/run_/@/task";else $%s "$%s";fi' "$1" "$1" "$2" "$1" "$2" "$2" "$3" "$4";};WKDLS=("${WKDLS[@]}" "${WKD%/}");TRACE="${TRACE:-1}";THD="${THD:-$WKD}";THREAD="${THD%/}/.th";SIG="${SIG:-SIGUSR1}";SIGWRK="${SIGWRK:-$(signal_ext_ WKD SRC SIGX SIGXR)}";SIGX="${SIGX:-exit}";SIGXR="${SIGXR:-2}";SLEEP="${SLEEP:-1}";COLOR="${COLOR:-1}";STATUS='ipclock_';STLN=;STBGCLR="${STBGCLR:-0}";STFGCLR="${STFGCLR:-33}";STPRELN="${STPRELN:-[ }";STPSTLN="${STPSTLN:- ]}";STREF=;type -t update_>/dev/null||update_(){ if [[ -e .update ]];then . .update;else refresh_ "$@";fi;};type -t refresh_>/dev/null||refresh_(){ refresh_status_;};refresh_status_(){ [[ $((STREF++)) -ne 0 ]]||{ type -t "$STATUS">/dev/null&&STLN="$("${STATUS[@]}" 2>/dev/null)";[[ -z ${STLN+1} ]]||{ local -i x="$(($(tput cols)-${#STLN}-${#STPRELN}-${#STPSTLN}))";tput -S <<!
sc
cup 0 $x
!
if [[ COLOR -eq 0 ]] 2>/dev/null;then echo -n "$STPRELN$STLN$STPSTLN";else echo -n -e '\033['"$STBGCLR"\;"$STFGCLR"\m"$STPRELN$STLN$STPSTLN"'\033[0m';fi;tput rc;};STREF=;};};ipclock_(){ local rc;{ [[ -e ${WKDLS%/}/.return ]]&&eval 'rc="${WKDLS%/}: $(<"${WKDLS%/}/.return")"';[[ -e ${WKDLS[1]%/}/.return ]]&&{ [[ -z $rc ]]||rc="$rc | ";eval 'rc="$rc${WKDLS[1]%/}: $(<"${WKDLS[1]%/}/.return")"';};} 2>/dev/null;[[ -z $rc ]]||printf "$rc";local ip="$(if [[ $OSTYPE == darwin* ]];then ipconfig getifaddr en0;else hostname -I|cut -d' ' -f1;fi 2>/dev/null)";[[ -z $ip ]]||{ [[ -z $rc ]]||printf "$STPSTLN$STPRELN";printf "$ip";};local clk="$(date +%H:%M:%S 2>/dev/null)";[[ -z $clk ]]||{ if [[ -z $ip ]];then [[ -z $rc ]]||printf "$STPSTLN$STPRELN";else printf ' | ';fi;printf "$clk";};};timestamp_(){ if [[ $OSTYPE == darwin* ]];then gdate +%y%m%d%H%M%S.%N||date +%y%m%d%H%M%S;else date +%y%m%d%H%M%S.%N;fi 2>/dev/null;};[[ RSV -le 0 ]] 2>/dev/null||eval "$(recall_ run_/reserve)" BKPID COLOR HEAD LN NKL PREKB132 PREKB139 PREKB160 PREKB161 PREKB167 PRESIG PSTKB132 PSTKB139 PSTKB160 PSTKB161 PSTKB164 PSTKB167 PSTLN PSTWRK SIGPID SIGTS SIGUSR SIGWRK SIGXR STATUS STBGCLR STFGCLR STLN STPRELN STPSTLN STREF TAIL THD THREAD TRACE WKDLS;[[ $SIG != 0 ]]&&{ [[ $(realpath "$WKD") == $PWD ]]&&{ rm .head;rm .update;} 2>/dev/null;{ [[ ECHO -lt 0 ]]||if [[ COLOR -eq 0 ]];then echo 'Starting new signal process';else echo -e '\033[0;33mStarting new signal process\033[0m';fi;} 2>/dev/null;SIGTS="$(timestamp_)";eval "$PRESIG"&&trap "update_ $SIG $SIGTS" "$SIG";(BKPID="$$";for((;;))do [[ -n $SIG ]]&&ps "$BKPID">/dev/null&&kill -"${SIG#-}" $BKPID;eval "$SIGWRK";done&) 2>/dev/null;reset_sigpid_;PST=(PST[1] 'kill_signal_ ${SIGPID[*]}');PRE=(PRE[1] 'PST=(PST[1] '\''PST=("${PST[@]:2}")'\'' "${PST[@]}")');};WRK=;PSTWRK=;BKP=;PREKB132=;PSTKB132=;PREKB139=;PSTKB139=;PREKB160=;PSTKB160=;PREKB161=;PSTKB161=;PSTKB164='refresh_status_;LN=1';PREKB167=;PSTKB167='refresh_status_;LN=';PSTLN='[[ LN -eq 0 ]]||refresh_status_';LN=;trap break SIGINT;if [[ $# -gt 0 ]];then return_ "$BKR";"$@";elif [[ -e .cmd ]];then return_ "$BKR";. .cmd;fi
