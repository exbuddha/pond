if [[ $1 == -* ]];then while [[ $1 == -* ]];do case "$1" in -m*)if [[ ${#1} -eq 2 ]];then MODE="$2";shift;else MODE="${1:2}";fi;;--mode)MODE="$2";shift;;-o*)if [[ ${#1} -eq 2 ]];then OUT="${2%/}";shift;else OUT="${1:2}";OUT="${OUT%/}";fi;;--out)OUT="${2%/}";shift;;--pre)PRE=(PRE[1] "$2");shift;;--post)PST=(PST[1] "$2");shift;;*)break;;esac;shift;done;if [[ -z $1&&$# -ne 0 ]];then set -- 1 127;else case "$1" in -h|--help)echo 'usage:

    run [options] [cmd]

options:

    -m|--mode m    run mode

                     [0]    starts immediately

                       1    periodically evaluates WAIT,
                            if empty sleeps for SLEEP amount

                       2    periodically evaluates RESET,
                            on success repeats mode 1 once,
                            if empty creates OUT directory,
                            on failure repeats mode 1 once

    -o|--out dir   output directory

    --pre code     pre-run code

    --post code    post-run code

    MODE           run mode

    WAIT           wait command for modes 1 and 2

    SLEEP          sleep time for modes 1 and 2

    RESET          reset test for mode 2

    OUT            output directory

    PRE            pre-run code identifier

    PST            post-run code identifier

    RSV            name reservation flag

    SRC            runner directory

    WKD            work directory

    WRK            command line plug-in code

    BKP            command line keybinding path

    BKW            command line stack counter

    VER            runner version'>&2;set -- 1 0;;-v|--version)echo "$VER">&2;set -- 1 0;;*)set -- 0 "$@";;esac;fi;elif [[ -z $1&&$# -ne 0 ]];then set -- 1 127;else set -- 0 "$@";fi;eval 'shift;[[ '"$1"' -eq 0 ]]'
